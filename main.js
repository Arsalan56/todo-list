(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol,\nul {\n    list-style: none;\n}\nblockquote,\nq {\n    quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\n/* CSS Reset End */\n\nbody {\n    --color: #4361ee;\n\n    cursor: default;\n    height: 100%;\n    min-height: 100vh;\n    width: 100vw;\n    font-size: 16px;\n    display: grid;\n    grid-template: min-content / 1fr;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\n        'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n    overflow: hidden;\n}\n\nbody > div {\n    display: flex;\n}\n\n/* Header styling */\n\nheader {\n    display: flex;\n    background: var(--color);\n    font-size: 3em;\n    padding: 10px 20px;\n    align-items: center;\n    gap: 10px;\n    grid-column: 1 / -1;\n    justify-content: space-between;\n    color: white;\n}\n\nbutton {\n    cursor: pointer;\n}\nheader > img {\n    --size: 1em;\n\n    height: var(--size);\n    width: var(--size);\n}\n\n/* Sidebar styling */\n\nheader > a {\n    height: 48px;\n    width: 48px;\n}\n.github {\n    height: 48px;\n    width: 48px;\n}\n\n.github:hover {\n    transition: 0.5s;\n    transform: rotate(360deg);\n}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.sidebar {\n    --grey: #e5e5e5;\n    visibility: hidden;\n    background: var(--grey);\n    padding: 20px;\n    font-size: 1.5em;\n    display: flex;\n    flex-direction: column;\n    width: 250px;\n    transform: translateX(-3000px);\n    transition: 1.5s;\n    box-sizing: border-box;\n    position: absolute;\n    height: calc(100vh - 70px);\n    overflow: scroll;\n}\n.sidebar > ul {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.sidebar > ul > li {\n    cursor: pointer;\n}\n\n.sidebar > p:first-of-type {\n    font-size: 1.1em;\n    font-weight: 600;\n    width: min-content;\n    display: inline;\n}\n\n.gap {\n    height: 0px;\n    border: 1px solid var(--color);\n    margin-top: 15px;\n    margin-bottom: 15px;\n}\n\n.sidebar > p {\n    margin-bottom: 7px;\n}\n.projects > li {\n    margin-left: 10px;\n    font-size: 0.9em;\n}\n\n.newproj {\n    background: none;\n    border: 0px;\n    padding: 0px;\n    font-size: 0.9em;\n    text-align: inherit;\n    border-radius: 999px;\n    padding: 5px 10px;\n    margin-left: -10px;\n}\n\n.newproj:hover {\n    transition: 0.3s;\n    background: var(--color);\n    color: var(--grey);\n}\n\n.menu {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    padding: 0;\n}\n.line {\n    fill: none;\n    stroke: white;\n    stroke-width: 6;\n    transition: stroke-dasharray 600ms cubic-bezier(0.4, 0, 0.2, 1),\n        stroke-dashoffset 600ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.line1 {\n    stroke-dasharray: 60 207;\n    stroke-width: 6;\n}\n.line2 {\n    stroke-dasharray: 60 60;\n    stroke-width: 6;\n}\n.line3 {\n    stroke-dasharray: 60 207;\n    stroke-width: 6;\n}\n.opened .line1 {\n    stroke-dasharray: 90 207;\n    stroke-dashoffset: -134;\n    stroke-width: 6;\n}\n.opened .line2 {\n    stroke-dasharray: 1 60;\n    stroke-dashoffset: -30;\n    stroke-width: 6;\n}\n.opened .line3 {\n    stroke-dasharray: 90 207;\n    stroke-dashoffset: -134;\n    stroke-width: 6;\n}\n\n.sb-active {\n    transition: 0.5s;\n    visibility: visible;\n    left: 0;\n    transform: translateX(0px);\n}\n\n/* Main styling */\n\n.main {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.cont {\n    --color-2: #0353a4;\n    display: flex;\n    flex-direction: column;\n    padding: clamp(10px, 5vw, 50px);\n    width: calc(100% - 250px);\n    align-self: flex-end;\n    box-sizing: border-box;\n    transition: 0.3s;\n    height: calc(100vh - 70px);\n    overflow: scroll;\n}\n\n.cont > div {\n    display: grid;\n    grid-template: 1fr / min-content 1fr repeat(3, min-content);\n    gap: 30px;\n    height: 30px;\n    font-size: 20px;\n    padding: 0px 5px;\n    width: 100%;\n    border-bottom: 2px solid var(--color-2);\n    cursor: pointer;\n    box-sizing: border-box;\n}\n\n.item > input {\n    width: 16px;\n    margin: 0px;\n    cursor: pointer;\n}\n\n.item > img {\n    height: 30px;\n    width: 30px;\n    overflow-x: hidden;\n}\n\n.item p {\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.item > div:first-of-type {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n}\n\n.cont > div:first-of-type {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5em;\n    padding-bottom: 2px;\n    cursor: default;\n}\n\n.cont > .newtask > button {\n    background: none;\n    border: 0px;\n    display: flex;\n    align-items: center;\n    font-size: 20px;\n    gap: 10px;\n    width: 100%;\n    justify-content: center;\n    cursor: pointer;\n}\n\n.cont > .newtask {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-bottom: none;\n    padding-top: 2px;\n}\n\n.cont > .form-cont {\n    margin-top: 10px;\n    height: min-content;\n    border: 0px;\n    box-shadow: 2px 2px 10px;\n    border-radius: 20px;\n    display: flex;\n    padding: 15px;\n    box-sizing: border-box;\n    cursor: default;\n    max-width: 500px;\n    align-self: center;\n    flex-direction: column;\n    gap: 0px;\n    visibility: hidden;\n    opacity: 0%;\n    margin-top: -18px;\n    position: absolute;\n}\n\n.cont > .visible {\n    visibility: visible;\n    transition: 0.4s;\n    opacity: 100%;\n    position: relative;\n}\n.form-cont > form {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    gap: 5px;\n}\n\ntextarea {\n    border: none;\n    overflow: auto;\n    outline: none;\n\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n\n    resize: none;\n    font-family: inherit;\n    font-size: 1em;\n    padding: 0px;\n    width: 100%;\n}\n\n.input-desc,\n.edit-desc {\n    font-size: 0.8em;\n}\n\n.priority {\n    display: flex;\n    gap: 4vw;\n    justify-content: space-between;\n}\n\n.priority > label {\n    font-size: 16px;\n    cursor: pointer;\n}\n\ninput[type='date'] {\n    border: 0px;\n    font-family: inherit;\n\n    border: none;\n    overflow: auto;\n    outline: none;\n\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n\n    resize: none;\n    font-family: inherit;\n    font-size: 1em;\n}\n\n.form-cont button,\n.edit-cover button {\n    align-self: center;\n    height: 35px;\n    background: var(--color);\n    border: 0px;\n    border-radius: 20px;\n    color: white;\n    font-size: 0.9em;\n    padding: 0px 20px;\n    cursor: pointer;\n    margin-top: 10px;\n}\n\n.form-cont > div:first-of-type {\n    margin: 0px -15px;\n    margin-top: -15px;\n    padding: 5px 15px;\n    padding-right: 10px;\n    color: white;\n    display: flex;\n    justify-content: space-between;\n    background: var(--color);\n    border-radius: 20px 20px 0px 0px;\n    margin-bottom: 5px;\n}\n\n.form-cont > div:first-of-type > img {\n    height: 20px;\n    width: 20px;\n    cursor: pointer;\n}\n\n.error::placeholder {\n    color: red;\n}\n\n.proj,\n.edit-proj {\n    border: 0px;\n    font-family: inherit;\n\n    border: none;\n    overflow: auto;\n    outline: none;\n\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n    font-size: 0.8em;\n    justify-self: flex-end;\n    border-bottom: 2px solid var(--color-2);\n    width: 150px;\n    text-align: center;\n}\n\n.cover,\n.edit-cover {\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    background: rgba(0, 0, 0, 0.3);\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    backdrop-filter: blur(4px);\n    visibility: hidden;\n}\n\n.cover > .info-cont,\n.edit-cover > div {\n    background: white;\n    display: flex;\n    width: clamp(300px, 70%, 700px);\n    height: min-content;\n    padding: 20px;\n    box-sizing: border-box;\n    border-radius: 20px;\n    flex-direction: column;\n    font-size: 1.2em;\n    gap: 20px;\n    box-shadow: 2px 2px 10px;\n}\n\n.details {\n    background: var(--color);\n    margin: -20px;\n    margin-bottom: 0px;\n    border-radius: 20px 20px 0px 0px;\n    height: 40px;\n    padding: 20px 15px;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    color: white;\n    justify-content: space-between;\n}\n\n.dt-close,\n.edt-close {\n    cursor: pointer;\n}\n\n.dt-ttl {\n    font-size: 1.2em;\n}\n\n.dt-desc {\n    margin-top: -15px;\n}\n\n.item p {\n    text-decoration: none;\n}\n\n.item.done p {\n    text-decoration: line-through;\n    color: grey;\n}\n\n.cont > .edit {\n    height: min-content;\n    border: 0px;\n    box-shadow: 2px 2px 10px;\n    border-radius: 20px;\n    display: flex;\n    padding: 15px;\n    box-sizing: border-box;\n    cursor: default;\n    align-self: center;\n    flex-direction: column;\n    gap: 0px;\n    margin-top: 4px;\n}\n\n/* Edit page styling */\n\n.full {\n    display: flex;\n    align-items: center;\n}\n\n.edit-cover > div {\n    max-width: 600px;\n}\n\n.full:last-of-type {\n    flex-direction: row;\n}\n\n.edit-cover > div > form {\n    margin-top: -15px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.edit-proj {\n    border-bottom: 2px solid var(--color);\n}\n\n.projects li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 50px;\n}\n\n.projects img {\n    height: 30px;\n    width: 30px;\n}\n\n.sidebar > ul:first-of-type > li:hover {\n    padding: 0px 10px;\n    color: #4361ee;\n    transition: 0.2s ease-in-out;\n}\n\n.cb {\n    display: flex;\n    align-items: center;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n    display: block;\n}\nbody {\n    line-height: 1;\n}\nol,\nul {\n    list-style: none;\n}\nblockquote,\nq {\n    quotes: none;\n}\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n    content: '';\n    content: none;\n}\ntable {\n    border-collapse: collapse;\n    border-spacing: 0;\n}\n\n/* CSS Reset End */\n\nbody {\n    --color: #4361ee;\n\n    cursor: default;\n    height: 100%;\n    min-height: 100vh;\n    width: 100vw;\n    font-size: 16px;\n    display: grid;\n    grid-template: min-content / 1fr;\n    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande',\n        'Lucida Sans Unicode', Geneva, Verdana, sans-serif;\n    overflow: hidden;\n}\n\nbody > div {\n    display: flex;\n}\n\n/* Header styling */\n\nheader {\n    display: flex;\n    background: var(--color);\n    font-size: 3em;\n    padding: 10px 20px;\n    align-items: center;\n    gap: 10px;\n    grid-column: 1 / -1;\n    justify-content: space-between;\n    color: white;\n}\n\nbutton {\n    cursor: pointer;\n}\nheader > img {\n    --size: 1em;\n\n    height: var(--size);\n    width: var(--size);\n}\n\n/* Sidebar styling */\n\nheader > a {\n    height: 48px;\n    width: 48px;\n}\n.github {\n    height: 48px;\n    width: 48px;\n}\n\n.github:hover {\n    transition: 0.5s;\n    transform: rotate(360deg);\n}\n\na {\n    text-decoration: none;\n    color: inherit;\n}\n\n.sidebar {\n    --grey: #e5e5e5;\n    visibility: hidden;\n    background: var(--grey);\n    padding: 20px;\n    font-size: 1.5em;\n    display: flex;\n    flex-direction: column;\n    width: 250px;\n    transform: translateX(-3000px);\n    transition: 1.5s;\n    box-sizing: border-box;\n    position: absolute;\n    height: calc(100vh - 70px);\n    overflow: scroll;\n}\n.sidebar > ul {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.sidebar > ul > li {\n    cursor: pointer;\n}\n\n.sidebar > p:first-of-type {\n    font-size: 1.1em;\n    font-weight: 600;\n    width: min-content;\n    display: inline;\n}\n\n.gap {\n    height: 0px;\n    border: 1px solid var(--color);\n    margin-top: 15px;\n    margin-bottom: 15px;\n}\n\n.sidebar > p {\n    margin-bottom: 7px;\n}\n.projects > li {\n    margin-left: 10px;\n    font-size: 0.9em;\n}\n\n.newproj {\n    background: none;\n    border: 0px;\n    padding: 0px;\n    font-size: 0.9em;\n    text-align: inherit;\n    border-radius: 999px;\n    padding: 5px 10px;\n    margin-left: -10px;\n}\n\n.newproj:hover {\n    transition: 0.3s;\n    background: var(--color);\n    color: var(--grey);\n}\n\n.menu {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    display: flex;\n    padding: 0;\n}\n.line {\n    fill: none;\n    stroke: white;\n    stroke-width: 6;\n    transition: stroke-dasharray 600ms cubic-bezier(0.4, 0, 0.2, 1),\n        stroke-dashoffset 600ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n.line1 {\n    stroke-dasharray: 60 207;\n    stroke-width: 6;\n}\n.line2 {\n    stroke-dasharray: 60 60;\n    stroke-width: 6;\n}\n.line3 {\n    stroke-dasharray: 60 207;\n    stroke-width: 6;\n}\n.opened .line1 {\n    stroke-dasharray: 90 207;\n    stroke-dashoffset: -134;\n    stroke-width: 6;\n}\n.opened .line2 {\n    stroke-dasharray: 1 60;\n    stroke-dashoffset: -30;\n    stroke-width: 6;\n}\n.opened .line3 {\n    stroke-dasharray: 90 207;\n    stroke-dashoffset: -134;\n    stroke-width: 6;\n}\n\n.sb-active {\n    transition: 0.5s;\n    visibility: visible;\n    left: 0;\n    transform: translateX(0px);\n}\n\n/* Main styling */\n\n.main {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n}\n\n.cont {\n    --color-2: #0353a4;\n    display: flex;\n    flex-direction: column;\n    padding: clamp(10px, 5vw, 50px);\n    width: calc(100% - 250px);\n    align-self: flex-end;\n    box-sizing: border-box;\n    transition: 0.3s;\n    height: calc(100vh - 70px);\n    overflow: scroll;\n}\n\n.cont > div {\n    display: grid;\n    grid-template: 1fr / min-content 1fr repeat(3, min-content);\n    gap: 30px;\n    height: 30px;\n    font-size: 20px;\n    padding: 0px 5px;\n    width: 100%;\n    border-bottom: 2px solid var(--color-2);\n    cursor: pointer;\n    box-sizing: border-box;\n}\n\n.item > input {\n    width: 16px;\n    margin: 0px;\n    cursor: pointer;\n}\n\n.item > img {\n    height: 30px;\n    width: 30px;\n    overflow-x: hidden;\n}\n\n.item p {\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n}\n\n.item > div:first-of-type {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n}\n\n.cont > div:first-of-type {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 1.5em;\n    padding-bottom: 2px;\n    cursor: default;\n}\n\n.cont > .newtask > button {\n    background: none;\n    border: 0px;\n    display: flex;\n    align-items: center;\n    font-size: 20px;\n    gap: 10px;\n    width: 100%;\n    justify-content: center;\n    cursor: pointer;\n}\n\n.cont > .newtask {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-bottom: none;\n    padding-top: 2px;\n}\n\n.cont > .form-cont {\n    margin-top: 10px;\n    height: min-content;\n    border: 0px;\n    box-shadow: 2px 2px 10px;\n    border-radius: 20px;\n    display: flex;\n    padding: 15px;\n    box-sizing: border-box;\n    cursor: default;\n    max-width: 500px;\n    align-self: center;\n    flex-direction: column;\n    gap: 0px;\n    visibility: hidden;\n    opacity: 0%;\n    margin-top: -18px;\n    position: absolute;\n}\n\n.cont > .visible {\n    visibility: visible;\n    transition: 0.4s;\n    opacity: 100%;\n    position: relative;\n}\n.form-cont > form {\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    gap: 5px;\n}\n\ntextarea {\n    border: none;\n    overflow: auto;\n    outline: none;\n\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n\n    resize: none;\n    font-family: inherit;\n    font-size: 1em;\n    padding: 0px;\n    width: 100%;\n}\n\n.input-desc,\n.edit-desc {\n    font-size: 0.8em;\n}\n\n.priority {\n    display: flex;\n    gap: 4vw;\n    justify-content: space-between;\n}\n\n.priority > label {\n    font-size: 16px;\n    cursor: pointer;\n}\n\ninput[type='date'] {\n    border: 0px;\n    font-family: inherit;\n\n    border: none;\n    overflow: auto;\n    outline: none;\n\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n\n    resize: none;\n    font-family: inherit;\n    font-size: 1em;\n}\n\n.form-cont button,\n.edit-cover button {\n    align-self: center;\n    height: 35px;\n    background: var(--color);\n    border: 0px;\n    border-radius: 20px;\n    color: white;\n    font-size: 0.9em;\n    padding: 0px 20px;\n    cursor: pointer;\n    margin-top: 10px;\n}\n\n.form-cont > div:first-of-type {\n    margin: 0px -15px;\n    margin-top: -15px;\n    padding: 5px 15px;\n    padding-right: 10px;\n    color: white;\n    display: flex;\n    justify-content: space-between;\n    background: var(--color);\n    border-radius: 20px 20px 0px 0px;\n    margin-bottom: 5px;\n}\n\n.form-cont > div:first-of-type > img {\n    height: 20px;\n    width: 20px;\n    cursor: pointer;\n}\n\n.error::placeholder {\n    color: red;\n}\n\n.proj,\n.edit-proj {\n    border: 0px;\n    font-family: inherit;\n\n    border: none;\n    overflow: auto;\n    outline: none;\n\n    -webkit-box-shadow: none;\n    -moz-box-shadow: none;\n    box-shadow: none;\n    font-size: 0.8em;\n    justify-self: flex-end;\n    border-bottom: 2px solid var(--color-2);\n    width: 150px;\n    text-align: center;\n}\n\n.cover,\n.edit-cover {\n    position: fixed;\n    top: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    background: rgba(0, 0, 0, 0.3);\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n    backdrop-filter: blur(4px);\n    visibility: hidden;\n}\n\n.cover > .info-cont,\n.edit-cover > div {\n    background: white;\n    display: flex;\n    width: clamp(300px, 70%, 700px);\n    height: min-content;\n    padding: 20px;\n    box-sizing: border-box;\n    border-radius: 20px;\n    flex-direction: column;\n    font-size: 1.2em;\n    gap: 20px;\n    box-shadow: 2px 2px 10px;\n}\n\n.details {\n    background: var(--color);\n    margin: -20px;\n    margin-bottom: 0px;\n    border-radius: 20px 20px 0px 0px;\n    height: 40px;\n    padding: 20px 15px;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    color: white;\n    justify-content: space-between;\n}\n\n.dt-close,\n.edt-close {\n    cursor: pointer;\n}\n\n.dt-ttl {\n    font-size: 1.2em;\n}\n\n.dt-desc {\n    margin-top: -15px;\n}\n\n.item p {\n    text-decoration: none;\n}\n\n.item.done p {\n    text-decoration: line-through;\n    color: grey;\n}\n\n.cont > .edit {\n    height: min-content;\n    border: 0px;\n    box-shadow: 2px 2px 10px;\n    border-radius: 20px;\n    display: flex;\n    padding: 15px;\n    box-sizing: border-box;\n    cursor: default;\n    align-self: center;\n    flex-direction: column;\n    gap: 0px;\n    margin-top: 4px;\n}\n\n/* Edit page styling */\n\n.full {\n    display: flex;\n    align-items: center;\n}\n\n.edit-cover > div {\n    max-width: 600px;\n}\n\n.full:last-of-type {\n    flex-direction: row;\n}\n\n.edit-cover > div > form {\n    margin-top: -15px;\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.edit-proj {\n    border-bottom: 2px solid var(--color);\n}\n\n.projects li {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    gap: 50px;\n}\n\n.projects img {\n    height: 30px;\n    width: 30px;\n}\n\n.sidebar > ul:first-of-type > li:hover {\n    padding: 0px 10px;\n    color: #4361ee;\n    transition: 0.2s ease-in-out;\n}\n\n.cb {\n    display: flex;\n    align-items: center;\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var d=n[s],A=r.base?d[0]+r.base:d[0],l=i[A]||0,c="".concat(A," ").concat(l);i[A]=l+1;var u=t(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var m=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:c,updater:m,references:1})}a.push(c)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var d=r(n,o),A=0;A<i.length;A++){var l=t(i[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=d}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!n;)n=r[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{function n(n){const e=document.querySelectorAll(".projects > li"),t=[];return{check:()=>(e.forEach((n=>{t.push(n.textContent)})),!t.includes(n[n.length-1].proj)),create:()=>{if(n[n.length-1].proj){const e=document.querySelector(".projects"),t=document.createElement("li"),r=document.createElement("p"),o=document.createElement("img");r.textContent=n[n.length-1].proj,o.setAttribute("src","9e963c8ceba7ebf6ced7.svg"),o.setAttribute("alt","delete project"),e.appendChild(t),t.appendChild(r),t.appendChild(o),o.addEventListener("click",(r=>{for(let e=0;e<n.length;e++)n[e].proj===o.previousSibling.textContent&&(n[e].proj=!1);e.removeChild(t),r.stopPropagation(),document.querySelector(".home").click()})),t.addEventListener("click",(()=>{const e=document.querySelector(".header"),t=document.querySelector(".newtask"),o=document.querySelector(".form-cont"),i=document.querySelector(".input-ttl");e.textContent=r.textContent,o.classList.remove("visible"),i.classList.remove("error"),i.setAttribute("placeholder","Title"),t.style.visibility="hidden",t.style.position="absolute";const a=document.querySelector(".input-desc"),s=document.querySelector(".prio:checked"),d=document.querySelector(".due-input"),A=document.querySelector(".proj");i.value="",a.value="",s&&(s.checked=!1),d.value="",A.value="",window.innerWidth<900&&(document.querySelector(".sidebar").classList.remove("sb-active"),document.querySelector(".menu").classList.remove("opened")),n.forEach((e=>{const t=document.querySelectorAll(".item")[n.indexOf(e)];e.proj===r.textContent?t.removeAttribute("style"):(t.style.visibility="hidden",t.style.position="absolute")}))}))}}}}(()=>{const n=document.querySelector(".sidebar"),e=document.querySelector(".sidebar > p"),t=document.querySelector(".menu"),r=document.querySelectorAll(".projects > li"),o=document.querySelector(".cont"),i=document.querySelector(".newtask > button"),a=document.querySelector(".form-cont"),s=document.querySelector(".form-cont > div:first-of-type > img"),d=document.querySelector(".input-ttl"),A=()=>{t.classList.toggle("opened"),t.setAttribute("aria-expanded",t.classList.contains("opened"))},l=()=>{window.innerWidth>=900?(n.hasAttribute("style")&&(n.removeAttribute("style"),e.removeAttribute("style"),r.forEach((n=>n.removeAttribute("style"))),o.removeAttribute("style")),n.classList.contains("sb-active")||(n.classList.toggle("sb-active"),A())):(n.classList.contains("sb-active")&&(n.classList.toggle("sb-active"),A()),r.forEach((n=>{n.style["margin-left"]="0px"})),e.style["align-self"]="center",n.style.width="100%",n.style.textAlign="center",n.style["font-size"]="2em",o.style.width="100%")};l(),window.addEventListener("resize",l);const c=()=>{"Home"===document.querySelector(".header").textContent&&i.parentNode.removeAttribute("style"),a.classList.remove("visible"),d.classList.remove("error"),d.setAttribute("placeholder","Title");const n=document.querySelector(".input-desc"),e=document.querySelector(".prio:checked"),t=document.querySelector(".due-input"),r=document.querySelector(".proj");d.value="",n.value="",e&&(e.checked=!1),t.value="",r.value=""};t.addEventListener("click",(()=>{n.classList.toggle("sb-active"),window.innerWidth>=900&&(n.classList.contains("sb-active")?n.classList.contains("sb-active")&&o.removeAttribute("style"):o.style.width="100%"),c()})),i.addEventListener("click",(()=>{i.parentNode.style.visibility="hidden",a.classList.toggle("visible")})),s.addEventListener("click",c)})();const e=document.querySelector(".edit-ttl"),r=document.querySelector(".edit-cover"),o=document.querySelector(".edt-close");let i=!1,a=0;const s=()=>{e.placeholder="Title",e.classList.remove("error"),r.style.visibility="hidden",i=!1};function d(n){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},d(n)}function A(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function l(n){A(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"===d(n)&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function c(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function u(n){A(1,arguments);var e=l(n),t=e.getUTCDay(),r=(t<1?7:0)+t-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function p(n){A(1,arguments);var e=l(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=u(r),i=new Date(0);i.setUTCFullYear(t,0,4),i.setUTCHours(0,0,0,0);var a=u(i);return e.getTime()>=o.getTime()?t+1:e.getTime()>=a.getTime()?t:t-1}var m={};function f(){return m}function h(n,e){var t,r,o,i,a,s,d,u;A(1,arguments);var p=f(),m=c(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:p.weekStartsOn)&&void 0!==r?r:null===(d=p.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var h=l(n),g=h.getUTCDay(),b=(g<m?7:0)+g-m;return h.setUTCDate(h.getUTCDate()-b),h.setUTCHours(0,0,0,0),h}function g(n,e){var t,r,o,i,a,s,d,u;A(1,arguments);var p=l(n),m=p.getUTCFullYear(),g=f(),b=c(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:g.firstWeekContainsDate)&&void 0!==r?r:null===(d=g.locale)||void 0===d||null===(u=d.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(b>=1&&b<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var B=new Date(0);B.setUTCFullYear(m+1,0,b),B.setUTCHours(0,0,0,0);var C=h(B,e),v=new Date(0);v.setUTCFullYear(m,0,b),v.setUTCHours(0,0,0,0);var y=h(v,e);return p.getTime()>=C.getTime()?m+1:p.getTime()>=y.getTime()?m:m-1}function b(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const B=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return b("yy"===e?r%100:r,e.length)},C=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):b(t+1,2)},v=function(n,e){return b(n.getUTCDate(),e.length)},y=function(n,e){return b(n.getUTCHours()%12||12,e.length)},x=function(n,e){return b(n.getUTCHours(),e.length)},w=function(n,e){return b(n.getUTCMinutes(),e.length)},I=function(n,e){return b(n.getUTCSeconds(),e.length)},k=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return b(Math.floor(r*Math.pow(10,t-3)),e.length)};var S={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),o=r>0?r:1-r;return t.ordinalNumber(o,{unit:"year"})}return B(n,e)},Y:function(n,e,t,r){var o=g(n,r),i=o>0?o:1-o;return"YY"===e?b(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):b(i,e.length)},R:function(n,e){return b(p(n),e.length)},u:function(n,e){return b(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return b(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return b(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return C(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return b(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){A(1,arguments);var t=l(n),r=h(t,e).getTime()-function(n,e){var t,r,o,i,a,s,d,l;A(1,arguments);var u=f(),p=c(null!==(t=null!==(r=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(a=e.locale)||void 0===a||null===(s=a.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==r?r:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==t?t:1),m=g(n,e),b=new Date(0);return b.setUTCFullYear(m,0,p),b.setUTCHours(0,0,0,0),h(b,e)}(t,e).getTime();return Math.round(r/6048e5)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):b(o,e.length)},I:function(n,e,t){var r=function(n){A(1,arguments);var e=l(n),t=u(e).getTime()-function(n){A(1,arguments);var e=p(n),t=new Date(0);return t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0),u(t)}(e).getTime();return Math.round(t/6048e5)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):b(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):v(n,e)},D:function(n,e,t){var r=function(n){A(1,arguments);var e=l(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=t-e.getTime();return Math.floor(r/864e5)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):b(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var o=n.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return b(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(o,{width:"short",context:"formatting"});default:return t.day(o,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var o=n.getUTCDay(),i=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return b(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(o,{width:"narrow",context:"standalone"});case"cccccc":return t.day(o,{width:"short",context:"standalone"});default:return t.day(o,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return b(o,e.length);case"io":return t.ordinalNumber(o,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,o=n.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,o=n.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return y(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):x(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):b(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):b(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):w(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):I(n,e)},S:function(n,e){return k(n,e)},X:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return q(o);case"XXXX":case"XX":return T(o);default:return T(o,":")}},x:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return q(o);case"xxxx":case"xx":return T(o);default:return T(o,":")}},O:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+E(o,":");default:return"GMT"+T(o,":")}},z:function(n,e,t,r){var o=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+E(o,":");default:return"GMT"+T(o,":")}},t:function(n,e,t,r){var o=r._originalDate||n;return b(Math.floor(o.getTime()/1e3),e.length)},T:function(n,e,t,r){return b((r._originalDate||n).getTime(),e.length)}};function E(n,e){var t=n>0?"-":"+",r=Math.abs(n),o=Math.floor(r/60),i=r%60;if(0===i)return t+String(o);var a=e||"";return t+String(o)+a+b(i,2)}function q(n,e){return n%60==0?(n>0?"-":"+")+b(Math.abs(n)/60,2):T(n,e)}function T(n,e){var t=e||"",r=n>0?"-":"+",o=Math.abs(n);return r+b(Math.floor(o/60),2)+t+b(o%60,2)}const j=S;var M=function(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},W=function(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const D={p:W,P:function(n,e){var t,r=n.match(/(P+)(p+)?/)||[],o=r[1],i=r[2];if(!i)return M(n,e);switch(o){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",M(o,e)).replace("{{time}}",W(i,e))}};var Y=["D","DD"],z=["YY","YYYY"];function L(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var P={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function U(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth;return n.formats[t]||n.formats[n.defaultWidth]}}const N={date:U({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:U({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:U({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var O={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function X(n){return function(e,t){var r;if("formatting"===(null!=t&&t.context?String(t.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=null!=t&&t.width?String(t.width):o;r=n.formattingValues[i]||n.formattingValues[o]}else{var a=n.defaultWidth,s=null!=t&&t.width?String(t.width):n.defaultWidth;r=n.values[s]||n.values[a]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const Z={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:X({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:X({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:X({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:X({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:X({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function H(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,o=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=e.match(o);if(!i)return null;var a,s=i[0],d=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],A=Array.isArray(d)?function(n,e){for(var t=0;t<n.length;t++)if(n[t].test(s))return t}(d):function(n,e){for(var t in n)if(n.hasOwnProperty(t)&&n[t].test(s))return t}(d);return a=n.valueCallback?n.valueCallback(A):A,{value:a=t.valueCallback?t.valueCallback(a):a,rest:e.slice(s.length)}}}var Q,R={ordinalNumber:(Q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(Q.matchPattern);if(!t)return null;var r=t[0],o=n.match(Q.parsePattern);if(!o)return null;var i=Q.valueCallback?Q.valueCallback(o[0]):o[0];return{value:i=e.valueCallback?e.valueCallback(i):i,rest:n.slice(r.length)}}),era:H({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:H({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:H({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:H({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:H({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const F={code:"en-US",formatDistance:function(n,e,t){var r,o=P[n];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=t&&t.addSuffix?t.comparison&&t.comparison>0?"in "+r:r+" ago":r},formatLong:N,formatRelative:function(n,e,t,r){return O[n]},localize:Z,match:R,options:{weekStartsOn:0,firstWeekContainsDate:1}};var $=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,G=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,J=/^'([^]*?)'?$/,_=/''/g,V=/[a-zA-Z]/;function K(n,e,t){var r,o,i,a,s,u,p,m,h,g,b,B,C,v,y,x,w,I;A(2,arguments);var k=String(e),S=f(),E=null!==(r=null!==(o=null==t?void 0:t.locale)&&void 0!==o?o:S.locale)&&void 0!==r?r:F,q=c(null!==(i=null!==(a=null!==(s=null!==(u=null==t?void 0:t.firstWeekContainsDate)&&void 0!==u?u:null==t||null===(p=t.locale)||void 0===p||null===(m=p.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==s?s:S.firstWeekContainsDate)&&void 0!==a?a:null===(h=S.locale)||void 0===h||null===(g=h.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==i?i:1);if(!(q>=1&&q<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var T=c(null!==(b=null!==(B=null!==(C=null!==(v=null==t?void 0:t.weekStartsOn)&&void 0!==v?v:null==t||null===(y=t.locale)||void 0===y||null===(x=y.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==C?C:S.weekStartsOn)&&void 0!==B?B:null===(w=S.locale)||void 0===w||null===(I=w.options)||void 0===I?void 0:I.weekStartsOn)&&void 0!==b?b:0);if(!(T>=0&&T<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var M=l(n);if(!function(n){if(A(1,arguments),!function(n){return A(1,arguments),n instanceof Date||"object"===d(n)&&"[object Date]"===Object.prototype.toString.call(n)}(n)&&"number"!=typeof n)return!1;var e=l(n);return!isNaN(Number(e))}(M))throw new RangeError("Invalid time value");var W=function(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}(M),P=function(n,e){return A(2,arguments),function(n,e){A(2,arguments);var t=l(n).getTime(),r=c(e);return new Date(t+r)}(n,-c(e))}(M,W),U={firstWeekContainsDate:q,weekStartsOn:T,locale:E,_originalDate:M};return k.match(G).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,D[e])(n,E.formatLong):n})).join("").match($).map((function(r){if("''"===r)return"'";var o,i,a=r[0];if("'"===a)return(i=(o=r).match(J))?i[1].replace(_,"'"):o;var s,d=j[a];if(d)return null!=t&&t.useAdditionalWeekYearTokens||(s=r,-1===z.indexOf(s))||L(r,e,String(n)),null!=t&&t.useAdditionalDayOfYearTokens||!function(n){return-1!==Y.indexOf(n)}(r)||L(r,e,String(n)),d(P,r,E.localize,U);if(a.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return r})).join("")}function nn(n,e){A(2,arguments);var t=l(n),r=c(e);return isNaN(r)?new Date(NaN):r?(t.setDate(t.getDate()+r),t):t}var en=t(379),tn=t.n(en),rn=t(795),on=t.n(rn),an=t(569),sn=t.n(an),dn=t(565),An=t.n(dn),ln=t(216),cn=t.n(ln),un=t(589),pn=t.n(un),mn=t(426),fn={};fn.styleTagTransform=pn(),fn.setAttributes=An(),fn.insert=sn().bind(null,"head"),fn.domAPI=on(),fn.insertStyleElement=cn(),tn()(mn.Z,fn),mn.Z&&mn.Z.locals&&mn.Z.locals,t.p,t.p,t.p,t.p,t.p;const hn=[];!function(){const n=document.querySelector(".cover"),e=document.querySelector(".info-cont"),t=document.querySelector(".dt-close"),i=document.querySelector(".edit-cover > div");t.addEventListener("click",(()=>{n.style.visibility="hidden"})),n.addEventListener("click",(()=>{n.style.visibility="hidden"})),e.addEventListener("click",(n=>{n.stopPropagation()})),r.addEventListener("click",s),o.addEventListener("click",s),i.addEventListener("click",(n=>{n.stopPropagation()}))}(),function(n){const e=document.querySelector(".home"),t=document.querySelector(".today"),r=document.querySelector(".week"),o=document.querySelector(".header"),i=document.querySelector(".newtask"),a=document.querySelector(".form-cont"),s=document.querySelector(".input-ttl"),d=K(new Date,"MM/dd/yyyy"),A=()=>{a.classList.remove("visible"),s.classList.remove("error"),s.setAttribute("placeholder","Title"),i.style.visibility="hidden",i.style.position="absolute";const n=document.querySelector(".input-desc"),e=document.querySelector(".prio:checked"),t=document.querySelector(".due-input"),r=document.querySelector(".proj");s.value="",n.value="",e&&(e.checked=!1),t.value="",r.value="",window.innerWidth<900&&(document.querySelector(".sidebar").classList.remove("sb-active"),document.querySelector(".menu").classList.remove("opened"))};e.addEventListener("click",(()=>{A(),i.removeAttribute("style"),o.textContent="Home",document.querySelectorAll(".item").forEach((n=>{n.removeAttribute("style")}))})),t.addEventListener("click",(()=>{A(),n.forEach((e=>{const t=document.querySelectorAll(".item")[n.indexOf(e)];if(e.due){const n=e.due.split("-");K(new Date(`${n[1]}-${n[2]}-${n[0]}`),"MM/dd/yyyy")!==d?(t.style.visibility="hidden",t.style.position="absolute"):t.removeAttribute("style")}else t.style.visibility="hidden",t.style.position="absolute"})),o.textContent="Today"})),r.addEventListener("click",(()=>{A(),o.textContent="Week";const e=[];for(let n=0;n<7;n++)e.push(K(nn(new Date,n),"MM/dd/yyyy"));n.forEach((t=>{const r=document.querySelectorAll(".item")[n.indexOf(t)];if(t.due){const n=t.due.split("-"),o=K(new Date(`${n[1]}-${n[2]}-${n[0]}`),"MM/dd/yyyy");e.includes(o)?r.removeAttribute("style"):(r.style.visibility="hidden",r.style.position="absolute")}else r.style.visibility="hidden",r.style.position="absolute"}))}))}(hn),document.querySelector(".form-cont button").addEventListener("click",(()=>{const t=document.querySelector(".input-ttl"),o=document.querySelector(".newtask > button"),d=document.querySelector(".form-cont");if(""!==t.value){const A=n(hn);t.classList.remove("error"),t.setAttribute("placeholder","Title"),o.parentNode.removeAttribute("style"),d.classList.toggle("visible"),function(n){const e=document.querySelector(".input-ttl"),t=e.value;let r=document.querySelector(".input-desc");r=!!r.value&&r.value;let o=document.querySelector(".prio:checked")||!1;o=o.value||!1;let i=document.querySelector(".due-input");i=!!i.value&&i.value;let a=document.querySelector(".proj");a=!!a.value&&a.value;const s={ttl:t,desc:r,prio:o,due:i,proj:a};n.push(s);const d=document.querySelector(".input-desc"),A=document.querySelector(".prio:checked"),l=document.querySelector(".due-input"),c=document.querySelector(".proj");e.value="",d.value="",A&&(A.checked=!1),l.value="",c.value=""}(hn),function(n){const e=n[n.length-1],t=document.querySelector(".cont"),r=document.createElement("div"),o=document.createElement("input"),i=document.createElement("p"),a=document.createElement("div"),s=document.createElement("p"),d=document.createElement("img"),A=document.createElement("img");if(i.textContent=e.ttl,e.due){const n=e.due.split("-");s.textContent=`${n[1]}/${n[2]}/${n[0]}`}else s.textContent="No Due";r.setAttribute("class","item"),r.setAttribute("data",n.length-1),d.setAttribute("src","9e963c8ceba7ebf6ced7.svg"),o.setAttribute("type","checkbox"),o.classList.add("cb"),A.setAttribute("src","dd6093dd83b2b6ed2da6.svg"),A.classList.add("edit"),t.insertBefore(r,document.querySelector(".newtask")),r.appendChild(o),r.appendChild(i),r.appendChild(a),a.appendChild(s),r.appendChild(A),r.appendChild(d)}(hn),function(t){const o=n(t),d=t.length-1,A=document.querySelectorAll(".item")[d].lastChild,l=document.querySelector(".cont");let c=document.querySelectorAll(".item");const u=document.querySelector(".dt-ttl"),p=document.querySelector(".dt-desc"),m=document.querySelector(".dt-prio"),f=document.querySelector(".dt-due"),h=document.querySelector(".dt-proj"),g=document.querySelector(".cover"),b=document.querySelectorAll(".cb")[d],B=document.querySelectorAll(".edit")[d],C=document.querySelector(".edit-desc"),v=document.querySelectorAll(".edit-prio"),y=document.querySelector(".edit-due"),x=document.querySelector(".edit-proj"),w=t[A.parentNode.getAttribute("data")],I=document.querySelector(".edit-cover button");A.addEventListener("click",(n=>{const e=A.parentNode;t.splice(e.getAttribute("data"),1),l.removeChild(e);let r=0;c=document.querySelectorAll(".item"),c.forEach((n=>{n.setAttribute("data",r++)})),n.stopPropagation()})),b.addEventListener("click",(n=>{A.parentNode.classList.toggle("done"),n.stopPropagation()})),A.parentNode.addEventListener("click",(()=>{if(u.textContent=w.ttl,p.textContent=w.desc||"No Description",m.textContent=w.prio?`Priority: ${w.prio}`:"No Priority",w.due){const n=w.due.split("-");f.textContent=`Due: ${n[1]}/${n[2]}/${n[0]}`}else f.textContent="No Due Date";h.textContent=w.proj?`Project: ${w.proj}`:"No Project",g.style.visibility="visible"})),B.addEventListener("click",(n=>{i=!0,a=t.indexOf(w),r.style.visibility="visible",e.value=w.ttl,C.value=w.desc?w.desc:"",y.value=w.due?w.due:"",x.value=w.proj?w.proj:"",v.forEach((n=>{n.value===w.prio&&(n.checked=!0)})),n.stopPropagation()})),I.addEventListener("click",(()=>{if(""!==e.value&&i){const n=document.querySelectorAll(".item > p")[a],e=document.querySelectorAll(".item > div > p")[a];if(s(),t[a].ttl=document.querySelector(".edit-ttl").value,t[a].desc=!!document.querySelector(".edit-desc").value&&document.querySelector(".edit-desc").value,t[a].prio=(document.querySelector(".edit-prio:checked")||!1).value||!1,t[a].due=!!document.querySelector(".edit-due").value&&document.querySelector(".edit-due").value,t[a].proj=!!document.querySelector(".edit-proj").value&&document.querySelector(".edit-proj").value,n.textContent=document.querySelector(".edit-ttl").value,t[a].due){const n=t[a].due.split("-");e.textContent=`${n[1]}/${n[2]}/${n[0]}`}else f.textContent="No Due";o.check()&&o.create()}else""===e.value&&(e.setAttribute("placeholder","TITLE REQUIRED!"),e.classList.contains("error")||e.classList.add("error"))}))}(hn),A.check()&&A.create()}else t.setAttribute("placeholder","TITLE REQUIRED!"),t.classList.contains("error")||t.classList.add("error")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,